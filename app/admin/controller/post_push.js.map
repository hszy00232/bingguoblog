{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/post_push.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "../../../src/admin/controller/post_push.js",
    "sourcesContent": [
        "import Post from './api/post.js';\nimport {PasswordHash} from 'phpass';\n\nexport default class extends Post {\n  modelInstance = this.model('post');\n\n  async __before() {\n\n  }\n\n  async checkAuth(data) {\n    let {app_key, auth_key, ...post} = data;\n    //check user\n    let poster = await this.model('user').where({app_key}).find();\n    if( think.isEmpty(poster) ) {\n      return this.fail('POSTER_NOT_EXIST');\n    }\n\n    this.poster = poster;\n    let {app_secret} = poster;\n    let passwordHash = new PasswordHash();\n    let result = passwordHash.checkPassword(`${app_secret}${post.markdown_content}`, auth_key);\n    return result;\n  }\n\n  async updatePost(post) {\n    if( post.markdown_content ) { post = this.getContentAndSummary(post); }\n    if( post.create_time ) { post = this.getPostTime(post); }\n    if( post.tag ) { post = await this.getTagIds(post.tag); }\n    let rows = await this.modelInstance.savePost(post);\n    return this.success({affectedRows: rows});\n  }\n\n  async getAction() {\n    if( !this.get('app_key') || !this.get('auth_key') ) {\n      return this.fail('PARAMS_ERROR');\n    }\n\n    let {app_key, auth_key} = this.get();\n    let result = await this.checkAuth({app_key, auth_key, markdown_content: 'Firekylin'});\n    return result ? this.success('KEY_CHECK_SUCCESS') : this.fail('KEY_CHECK_FAILED');\n  }\n\n  async postAction() {\n    let post = this.post();\n    if( !this.checkAuth(post) ) { return this.fail('POST_CONTENT_ERROR'); }\n\n    //check pathname\n    let exPost = await this.modelInstance.where({pathname: post.pathname}).find();\n    if( !think.isEmpty(exPost) ) {\n      if( exPost.user.id != this.poster.id ) {\n        return this.fail('POST_USER_ERROR');\n      }\n      post.id = exPost.id;\n      return this.updatePost(post);\n    }\n    \n    post.user_id = this.poster.id;\n    post = this.getContentAndSummary(post);\n    post = this.getPostTime(post);\n    post.tag = await this.getTagIds(post.tag);\n\n    if( post.status == 3 && this.poster.type != 1 ) {\n      post.status = 1;\n    }\n\n    let insertId = await this.modelInstance.addPost(post);\n    return this.success({id: insertId});\n  }\n\n  async putAction() {\n  }\n\n  async deleteAction() {\n  }\n}\n"
    ]
}