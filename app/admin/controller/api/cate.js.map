{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/cate.js"
    ],
    "names": [],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;mBAOQ,S;0FAAU,I;UACV,M;;;;;AAAA,oB;;AACJ,kBAAG,KAAK,GAAL,CAAS,KAAT,CAAH,EAAoB;AAClB,qBAAK,aAAL,CAAmB,KAAnB,CAAyB,EAAC,KAAK,KAAK,GAAL,CAAS,KAAT,CAAN,EAAzB;AACD;;mBACE,KAAK,E;;;;;;qBACS,KAAK,aAAL,CAAmB,KAAnB,CAAyB,EAAC,IAAI,KAAK,EAAV,EAAzB,EAAwC,IAAxC,E;;;AAAf,oB;;AACA,qBAAO,SAAP,GAAmB,OAAO,SAAP,CAAiB,MAApC;;;;;;qBAEe,KAAK,aAAL,CAAmB,MAAnB,E;;;AAAf,oB;;AACA,uBAAS,OAAO,GAAP,CAAW,gBAAQ;AAC1B,qBAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,MAAhC;AACA,uBAAO,IAAP;AACD,eAHQ,CAAT;;;+CAKK,KAAK,OAAL,CAAa,MAAb,C;;;;;;;;;;;;;;;;;;;;;;;mBAOH,U;;UACA,I,EAEA,G;;;;;AAFA,kB,GAAO,KAAK,IAAL,E;;qBAEK,KAAK,aAAL,CAAmB,OAAnB,CAA2B,IAA3B,C;;;AAAZ,iB;;oBACD,IAAI,IAAJ,KAAa,O;;;;;gDACP,KAAK,IAAL,CAAU,YAAV,C;;;gDAEF,KAAK,OAAL,CAAa,EAAC,IAAI,IAAI,EAAT,EAAb,C;;;;;;;;;;;;;;;;;;;;;;mBAMH,S;;UAIA,I,EAEA,I;;;;;kBALC,KAAK,E;;;;;gDACD,KAAK,IAAL,CAAU,cAAV,C;;;AAEL,kB,GAAO,KAAK,IAAL,E;;AACX,mBAAK,EAAL,GAAU,KAAK,EAAf;;qBACiB,KAAK,aAAL,CAAmB,QAAnB,CAA4B,IAA5B,C;;;AAAb,kB;gDACG,KAAK,OAAL,CAAa,EAAC,cAAc,IAAf,EAAb,C;;;;;;;;;;;;;;;;;mBAGH,Y;;;;;;kBACA,KAAK,E;;;;;gDACA,KAAK,IAAL,CAAU,cAAV,C;;;;qBAEH,KAAK,aAAL,CAAmB,UAAnB,CAA8B,KAAK,EAAnC,C;;;gDACC,KAAK,OAAL,E",
    "file": "../../../../src/admin/controller/api/cate.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\n\nexport default class extends Base {\n  /**\n   * get\n   * @return {[type]} [description]\n   */\n  async getAction(self){\n    let result;\n    if(this.get('pid')) {\n      this.modelInstance.where({pid: this.get('pid')});\n    }\n    if(this.id) {\n      result = await this.modelInstance.where({id: this.id}).find();\n      result.post_cate = result.post_cate.length;\n    } else {\n      result = await this.modelInstance.select();\n      result = result.map(item => {\n        item.post_cate = item.post_cate.length;\n        return item;\n      });\n    }\n    return this.success(result);\n  }\n\n  /**\n   * add user\n   * @return {[type]} [description]\n   */\n  async postAction(){\n    let data = this.post();\n\n    let ret = await this.modelInstance.addCate(data);\n    if(ret.type === 'exist'){\n      return this.fail('CATE_EXIST');\n    }\n    return this.success({id: ret.id});\n  }\n  /**\n   * update user info\n   * @return {[type]} [description]\n   */\n  async putAction(){\n    if (!this.id) {\n      return this.fail('PARAMS_ERROR');\n    }\n    let data = this.post();\n    data.id = this.id;\n    let rows = await this.modelInstance.saveCate(data);\n    return this.success({affectedRows: rows});\n  }\n\n  async deleteAction() {\n    if(!this.id) {\n      return this.fail('PARAMS_ERROR');\n    }\n    await this.modelInstance.deleteCate(this.id);\n    return this.success();\n  }\n}\n"
    ]
}