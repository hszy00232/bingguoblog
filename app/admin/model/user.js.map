{
    "version": 3,
    "sources": [
        "../../../src/admin/model/user.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "../../../src/admin/model/user.js",
    "sourcesContent": [
        "'use strict';\n\nimport {PasswordHash} from 'phpass';\nimport Base from './base';\n/**\n * model\n */\nexport default class extends Base {\n\n  /**\n   * get password\n   * @param  {String} username []\n   * @param  {String} salt     []\n   * @return {String}          []\n   */\n  getEncryptPassword(password){\n    let passwordHash = new PasswordHash();\n    let hash = passwordHash.hashPassword(password);\n    return hash;\n  }\n  /**\n   * check password\n   * @param  {[type]} userInfo [description]\n   * @param  {[type]} password [description]\n   * @return {[type]}          [description]\n   */\n  checkPassword(userInfo, password){\n    let passwordHash = new PasswordHash();\n    return passwordHash.checkPassword(password, userInfo.password);\n  }\n\n  generateKey(userId, app_key, app_secret, status) {\n    let data = {app_key, app_secret};\n    if(status) { data.status = status; }\n    this.where({id: userId}).update(data);\n  }\n\n  /**\n   * after select\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  afterSelect(data){\n    return data.map(item => {\n      return this.afterFind(item);\n    });\n  }\n  afterFind(data){\n    if(data.create_time){\n      data.create_time = think.datetime(new Date(data.create_time));\n    }\n    if(data.last_login_time){\n      data.last_login_time = think.datetime(new Date(data.last_login_time));\n    }\n    return data;\n  }\n  /**\n   * 添加用户\n   * @param {[type]} data [description]\n   * @param {[type]} ip   [description]\n   */\n  addUser(data, ip){\n    let create_time = think.datetime();\n    let encryptPassword = this.getEncryptPassword(data.password);\n    return this.where({name: data.username, email: data.email, _logic: 'OR'}).thenAdd({\n      name: data.username,\n      email: data.email,\n      display_name: data.display_name,\n      password: encryptPassword,\n      create_time: create_time,\n      last_login_time: create_time,\n      create_ip: ip,\n      last_login_ip: ip,\n      type: data.type,\n      status: data.status\n    });\n  }\n  /**\n   * 保存用户信息\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  async saveUser(data, ip){\n    let info = await this.where({id: data.id}).find();\n    if(think.isEmpty(info)){\n      return Promise.reject(new Error('UESR_NOT_EXIST'));\n    }\n    let password = data.password;\n    if(password){\n      password = this.getEncryptPassword(password);\n    }\n    let updateData = {};\n    ['display_name', 'type', 'status'].forEach(item => {\n      if(data[item]){\n        updateData[item] = data[item];\n      }\n    });\n    if(password){\n      updateData.password = password;\n    }\n    if(think.isEmpty(updateData)){\n      return Promise.reject('DATA_EMPTY');\n    }\n    if(!info.email && data.email){\n      let count = await this.where({email: data.email}).count('email');\n      if(!count){\n        updateData.email = data.email;\n      }\n    }\n    updateData.last_login_time = think.datetime();\n    updateData.last_login_ip = ip;\n    return this.where({id: data.id}).update(updateData);\n  }\n}\n"
    ]
}