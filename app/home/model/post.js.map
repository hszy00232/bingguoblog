{
    "version": 3,
    "sources": [
        "../../../src/home/model/post.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "../../../src/home/model/post.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.relation {\n  /**\n   * relation\n   * @type {Object}\n   */\n  relation = {\n    cate: {\n      type: think.model.MANY_TO_MANY,\n      field: 'id,name'\n    },\n    tag: {\n      type: think.model.MANY_TO_MANY,\n      field: 'id,name'\n    },\n    user: {\n      type: think.model.BELONG_TO,\n      field: 'id,name,display_name'\n    }\n  };\n  /**\n   * get where condition\n   * @param  {[type]} where [description]\n   * @return {[type]}       [description]\n   */\n  getWhereCondition(where){\n    where = think.extend({}, where, {\n      is_public: 1, //公开\n      type: 0, //文章\n      status: 3 //已经发布\n    });\n    if(!where.create_time){\n      where.create_time = {\n        '<=': think.datetime()\n      };\n    }\n    return where;\n  }\n  /**\n   * get post list\n   * @param  {[type]} page  [description]\n   * @param  {[type]} where [description]\n   * @return {[type]}       [description]\n   */\n  async getPostList(page, options = {}){\n    let field = options.field || 'id,title,pathname,create_time,summary,comment_num';\n    if(options.tag || options.cate){\n      let name = options.tag ? 'tag' : 'cate';\n      let {id} = await this.model(name).field('id').setRelation(false).where({name: options.tag || options.cate}).find();\n      if(think.isEmpty(id)){\n        return false;\n      }\n      let where = this.getWhereCondition({[`${name}.${name}_id`]: id});\n      return this.join({\n        table: `post_${name}`,\n        as: name,\n        on: ['id', 'post_id']\n      }).where(where).order('create_time DESC').countSelect();\n    }\n\n    let where = this.getWhereCondition(options.where);\n    page = page | 0 || 1;\n    //only cache first page post\n    // if(page === 1){\n    //   return think.cache('post_1', () => {\n    //     return this.field(field).page(page).setRelation(false).order('create_time DESC').where(where).countSelect();\n    //   },{timeout:259200});\n    // }\n\n    return this.field(field).page(page).setRelation(false).order('create_time DESC').where(where).countSelect();\n  }\n\n  /**\n   * get post detail info\n   * @param  {[type]} pathname [description]\n   * @return {[type]}          [description]\n   */\n  async getPostDetail(pathname){\n    let where = this.getWhereCondition({pathname: pathname});\n    let detail = await this.where(where).fieldReverse('markdown_content,summary').find();\n    if(think.isEmpty(detail)){\n      return detail;\n    }\n    let createTime = think.datetime(detail.create_time);\n    let prevWhere = this.getWhereCondition({\n      create_time: ['<', createTime],\n      id: ['!=', detail.id]\n    });\n    let prevPromise = this.field('title,pathname').setRelation(false).where(prevWhere).order('create_time DESC').find();\n    let nextWhere = this.getWhereCondition({\n      create_time: ['>', createTime],\n      id: ['!=', detail.id]\n    });\n    let nextPromise = this.field('title,pathname').setRelation(false).where(nextWhere).order('create_time ASC').find();\n    let [prev, next] = await Promise.all([prevPromise, nextPromise]);\n    return {\n      detail,\n      prev,\n      next\n    }\n  }\n  async getPostRssList(){\n    let field = 'id,title,pathname,content,create_time';\n    let where = this.getWhereCondition();\n\n    let data = await this.field(field).where(where).order('create_time DESC').setRelation(false).limit(10).select();\n\n    return data;\n  }\n\n  async getPostSitemapList(){\n    let field = 'pathname,update_time';\n    let where = this.getWhereCondition();\n\n    let data = await this.field(field).where(where).order('update_time DESC').setRelation(false).select();\n    return data;\n  }\n  /**\n   * get post archive\n   * @return {[type]} [description]\n   */\n  async getPostArchive(){\n    let where = this.getWhereCondition();\n    let data = await this.field('id,title,pathname,create_time').order('create_time DESC').setRelation(false).where(where).select();\n    let result = {};\n    data.forEach(item => {\n      let yearMonth = think.datetime(item.create_time, 'YYYY年MM月');\n      if(!(yearMonth in result)){\n        result[yearMonth] = [];\n      }\n      result[yearMonth].push(item);\n    });\n    return result;\n  }\n  /**\n   * get post search result\n   * @param  {[type]} keyword [description]\n   * @param  {[type]} page    [description]\n   * @return {[type]}         [description]\n   */\n  async getPostSearch(keyword, page){\n    let where = {'title|content': ['LIKE', `%${keyword}%`]}\n    where = this.getWhereCondition(where);\n    return this.where(where).page(page).setRelation(false).field('title,pathname,summary,create_time').order('create_time DESC').countSelect();\n  }\n}\n"
    ]
}