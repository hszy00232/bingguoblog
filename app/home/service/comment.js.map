{
    "version": 3,
    "sources": [
        "../../../src/home/service/comment.js"
    ],
    "names": [],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;mBAOE,I,mBAAa;AAAA;;AAAA,sCAAL,IAAK;AAAL,UAAK;AAAA;;AACX,2DAAM,IAAN,kDAAc,IAAd;AACD,G;;;;;;;mBAKK,I;;UACA,Y,EACA,O,EACA,O;;;;;AAFA,0B,GAAe,KAAK,KAAL,CAAW,SAAX,C;;qBACC,aAAa,UAAb,E;;;AAAhB,qB;AACA,qB,GAAU,QAAQ,O;;mBACnB,QAAQ,I;;;;;oBACN,QAAQ,IAAR,KAAiB,Q;;;;;+CACX,KAAK,cAAL,CAAoB,OAApB,C;;;oBACA,QAAQ,IAAR,KAAiB,S;;;;;+CACjB,KAAK,eAAL,CAAqB,OAArB,C;;;;;;;;;;;;;;;;;;;;;;mBAQP,W;;UACA,S,EACA,O,EACA,I;;;;;AAFA,uB,GAAY,KAAK,KAAL,CAAW,MAAX,C;;qBACI,UAAU,WAAV,CAAsB,KAAtB,EAA6B,KAA7B,CAAmC,kBAAnC,EAAuD,KAAvD,CAA6D,yBAA7D,EAAwF,MAAxF,E;;;AAAhB,qB;AACA,kB,GAAO,E;;AACX,sBAAQ,GAAR,CAAY,gBAAQ;AAClB,oBAAI,MAAM,MAAM,GAAN,CAAU,KAAK,QAAf,CAAV;AACA,qBAAK,GAAL,IAAY,EAAC,IAAI,KAAK,EAAV,EAAc,aAAa,KAAK,WAAhC,EAAZ;AACA,uBAAO,GAAP;AACD,eAJD;gDAKO,I;;;;;;;;;;;;;;;;;;;;;;mBAMH,c;2FAAe,O;;;UAEf,Q,EAIA,O,EACA,K,EAEE,G,EAKA,G,EAEA,E,EACA,Q,EAIA,I,EAMA,Q;;;;;;qBAzBe,KAAK,WAAL,E;;;AAAjB,sB;;mBACD,MAAM,OAAN,CAAc,QAAd,C;;;;;;;;AAGC,qB,GAAU,oBAAY,QAAZ,C;;AACV,mB,GAAQ,C;;;mBACN,I;;;;;AACA,iB,GAAM,QAAQ,KAAR,CAAc,KAAd,EAAqB,QAAQ,EAA7B,C;;AACV,uBAAS,EAAT;;kBACI,IAAI,M;;;;;;;;AAGJ,iB,gBAAiB,QAAQ,I,oCAAmC,IAAI,IAAJ,CAAS,KAAT,C;;;AAE5D,gB,GAAK,MAAM,SAAN,sC;;qBACY,GAAG,GAAH,EAAQ,KAAR,CAAc,YAAM,CAAE,CAAtB,C;;;AAAjB,sB;;kBACA,Q;;;;;;;;AAGA,kB,GAAO,SAAS,IAAT,CAAc,KAAd,CAAoB,2CAApB,C;;kBACP,I;;;;;;;;;AAIJ,qBAAO,KAAK,KAAL,CAAW,KAAK,CAAL,CAAX,EAAoB,MAA3B;AACI,sB,GAAW,KAAK,GAAL,CAAS,gBAAQ;AAC9B,oBAAG,KAAK,QAAL,KAAkB,SAAS,KAAK,EAAd,EAAkB,WAAvC,EAAmD;AACjD;AACD;AACD,oBAAI,KAAK,SAAS,KAAK,EAAd,EAAkB,EAA3B;AACA,uBAAO,OAAK,KAAL,CAAW,MAAX,EAAmB,KAAnB,CAAyB,EAAC,IAAI,EAAL,EAAzB,EAAmC,MAAnC,CAA0C,EAAC,aAAa,KAAK,QAAnB,EAA1C,CAAP;AACD,eANc,C;;qBAOT,kBAAQ,GAAR,CAAY,QAAZ,C;;;mBACH,SAAS,M;;;;;;qBACJ,KAAK,cAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;mBAQN,e;2FAAgB,O;UAChB,Q,EAIA,O,EACA,K,EAEE,G,EAKA,G,EAEA,E,EACA,Q,EACA,I,EACA,Q,EACI,G,EAIF,E,EACA,O;;;;;;qBAvBa,KAAK,WAAL,E;;;AAAjB,sB;;mBACD,MAAM,OAAN,CAAc,QAAd,C;;;;;;;;AAGC,qB,GAAU,oBAAY,QAAZ,C;AACV,mB,GAAQ,C;;;mBACN,I;;;;;AACA,iB,GAAM,QAAQ,KAAR,CAAc,KAAd,EAAqB,QAAQ,EAA7B,C;;AACV,uBAAS,EAAT;;kBACI,IAAI,M;;;;;;;;AAGJ,iB,8DAA+D,QAAQ,I,iBAAgB,IAAI,IAAJ,CAAS,GAAT,C;;;AAEvF,gB,GAAK,MAAM,SAAN,sC;;qBACY,GAAG,GAAH,C;;;AAAjB,sB;AACA,kB,GAAO,KAAK,KAAL,CAAW,SAAS,IAApB,EAA0B,Q;AACjC,sB,GAAW,E;wDACA,I;;;;;;;;AAAP,iB;;oBACH,KAAK,GAAL,EAAU,QAAV,KAAuB,SAAS,GAAT,EAAc,W;;;;;;;;AAGpC,gB,GAAK,SAAS,GAAT,EAAc,E;AACnB,qB,GAAU,KAAK,KAAL,CAAW,MAAX,EAAmB,KAAnB,CAAyB,EAAC,IAAI,EAAL,EAAzB,EAAmC,MAAnC,CAA0C,EAAC,aAAa,KAAK,GAAL,EAAU,QAAxB,EAA1C,C;;AACd,uBAAS,IAAT,CAAc,OAAd;;;;;;qBAEI,kBAAQ,GAAR,CAAY,QAAZ,C;;;mBACH,SAAS,M;;;;;;qBACJ,KAAK,cAAL,E;;;;;;;;;;;;;;;;;;;;;mBAIZ,c,6BAAgB;AACd,YAAQ,GAAR,CAAY,kBAAZ;AACA,WAAO,MAAM,KAAN,CAAY,QAAZ,EAAsB,IAAtB,CAAP;AACD,G;;;EA3H0B,MAAM,OAAN,CAAc,I",
    "file": "../../../src/home/service/comment.js",
    "sourcesContent": [
        "'use strict';\n\nimport request from 'request';\n\nexport default class extends think.service.base {\n  /**\n   * init\n   * @return {}         []\n   */\n  init(...args){\n    super.init(...args);\n  }\n  /**\n   * sync post comments\n   * @return {[type]} [description]\n   */\n  async sync(){\n    let optionsModel = this.model('options');\n    let options = await optionsModel.getOptions();\n    let comment = options.comment;\n    if(comment.name){\n      if(comment.type === 'disqus'){\n        return this.syncFromDisqus(comment);\n      }else if(comment.type === 'duoshuo'){\n        return this.syncFromDuoshuo(comment);\n      }\n    }\n  }\n  /**\n   * get post data\n   * @return {[type]} [description]\n   */\n  async getPostData(){\n    let postModel = this.model('post');\n    let allPost = await postModel.setRelation(false).order('create_time DESC').field('id,pathname,comment_num').select();\n    let keys = {};\n    allPost.map(item => {\n      let key = think.md5(item.pathname);\n      keys[key] = {id: item.id, comment_num: item.comment_num};\n      return key;\n    });\n    return keys;\n  }\n  /**\n   * sync from disqus\n   * @return {[type]} [description]\n   */\n  async syncFromDisqus(comment){\n\n    let postData = await this.getPostData();\n    if(think.isEmpty(postData)){\n      return;\n    }\n    let threads = Object.keys(postData); //.join('&l=')\n    let index = 0;\n    while(true){\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if(!ths.length){\n        return;\n      }\n      let url = `https://${comment.name}.disqus.com/count-data.js?1=${ths.join('&l=')}`;\n      //think.log(`sync comments ${url}`);\n      let fn = think.promisify(request, request);\n      let response = await fn(url).catch(() => {});\n      if(!response){\n        continue;\n      }\n      let data = response.body.match(/DISQUSWIDGETS.displayCount\\(([^\\(\\)]+)\\);/);\n      if(!data){\n        continue;\n      }\n\n      data = JSON.parse(data[1]).counts;\n      let promises = data.map(item => {\n        if(item.comments === postData[item.id].comment_num){\n          return;\n        }\n        let id = postData[item.id].id;\n        return this.model('post').where({id: id}).update({comment_num: item.comments});\n      });\n      await Promise.all(promises);\n      if(promises.length){\n        await this.clearPostCache();\n      }\n    }\n  }\n  /**\n   * sync from duoshuo\n   * @return {[type]} [description]\n   */\n  async syncFromDuoshuo(comment){\n    let postData = await this.getPostData();\n    if(think.isEmpty(postData)){\n      return;\n    }\n    let threads = Object.keys(postData);\n    let index = 0;\n    while(true){\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if(!ths.length){\n        return;\n      }\n      let url = `http://api.duoshuo.com/threads/counts.json?short_name=${comment.name}&threads=${ths.join(',')}`;\n      //think.log(`sync comments ${url}`);\n      let fn = think.promisify(request, request);\n      let response = await fn(url);\n      let data = JSON.parse(response.body).response;\n      let promises = [];\n      for(let key in data){\n        if(data[key].comments === postData[key].comment_num){\n          continue;\n        }\n        let id = postData[key].id;\n        let promise = this.model('post').where({id: id}).update({comment_num: data[key].comments});\n        promises.push(promise);\n      }\n      await Promise.all(promises);\n      if(promises.length){\n        await this.clearPostCache();\n      }\n    }\n  }\n  clearPostCache(){\n    console.log('clear post cache');\n    return think.cache('post_1', null);\n  }\n}"
    ]
}