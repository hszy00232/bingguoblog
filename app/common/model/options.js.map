{
    "version": 3,
    "sources": [
        "../../../src/common/model/options.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "../../../src/common/model/options.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n  /**\n   * options cache key\n   * @type {String}\n   */\n  cacheKey = 'website_options';\n  /**\n   * cache options\n   * @type {Object}\n   */\n  cacheOptions = {\n    timeout: 30 * 24 * 3600 * 1000,\n    type: !think.isMaster ? 'file' : 'memory'\n  };\n  /**\n   * get options\n   * @return {} []\n   */\n  async getOptions(flag){\n    if(flag === true){\n      await think.cache(this.cacheKey, null);\n    }\n    let ret = await think.cache(this.cacheKey, async () => {\n      let data = await this.select();\n      let result = {};\n      data.forEach(item => {\n        result[item.key] = item.value;\n      });\n      return result;\n    }, this.cacheOptions);\n    //comment type\n    if(ret){\n      if(ret.comment && think.isString(ret.comment)){\n        ret.comment = JSON.parse(ret.comment);\n      }\n      if(!ret.comment){\n        ret.comment = {type: 'disqus'};\n      }\n      if(ret.push_sites && think.isString(ret.push_sites)){\n        ret.push_sites = JSON.parse(ret.push_sites);\n      }\n      if(!ret.push_sites){\n        ret.push_sites = {};\n      }\n    }\n    return ret;\n  }\n  /**\n   * update options\n   * @return {} []\n   */\n  async updateOptions(key, value){\n    let data = think.isObject(key) ? think.extend({}, key) : {[key] : value};\n    let cacheData = await think.cache(this.cacheKey, undefined, this.cacheOptions);\n    if(think.isEmpty(cacheData)){\n      cacheData = await this.getOptions();\n    }\n    let changedData = {};\n    for(let key in data){\n      if(data[key] !== cacheData[key]){\n        changedData[key] = data[key];\n      }\n    }\n    //data is not changed\n    if(think.isEmpty(changedData)){\n      return;\n    }\n    let p1 = think.cache(this.cacheKey, think.extend(cacheData, changedData), this.cacheOptions);\n    let promises = [p1];\n    for(let key in changedData){\n      let value = changedData[key];\n      let exist = await this.where({key: key}).count('key');\n      let p;\n      if(exist){\n        p = this.where({key: key}).update({value: value});\n      }else{\n        p = this.add({key, value});\n      }\n      promises.push(p);\n    }\n    await Promise.all(promises);\n    await this.getOptions(true);\n  }\n}"
    ]
}